##############
#  KEYBOARD  #
##############
autoload zkbd
zkbd_file=${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR-$OSTYPE
[[ ! -f "$zkbd_file" ]] && zkbd
# zkbd aborted
if [[ ! -f "$zkbd_file" ]]
then
  print
  print "!!! zkbd aborted! Please run it again. To skip a key, press Space."
  print
  # Note that the key bindings below all have checks, so we don't have to
  # wrap them in an "if"
else
  source $zkbd_file
fi
unset zkbd_file # don't litter

# Vim-style line editing (starts in viins insert mode, but can Escape to
# vicmd mode)
bindkey -v
# I want my bck-i-search
bindkey -M viins "^r" history-incremental-search-backward
bindkey -M vicmd "f" history-incremental-search-backward

# Set some defaults. Use -z, not -e, because we're checking that it's set to
# an empty string.
[[ -z "${key[Home]}" ]] && key[Home]='^[[H'
[[ -z "${key[End]}" ]] && key[End]='^[[F'

# Via http://dev.codemac.net/?p=config.git;a=blob_plain;f=zsh/env;h=350939a5c6b890e91a0a3bfec6e7c96c21fd8d5b
# How about that "#{key[Home]}", huh? I love well-named variables.
# setup key accordingly
[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
#[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
# This will make ZSH hesitate every time you press backspace. Don't do it.
#[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char
