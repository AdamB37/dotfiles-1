# basic aliases (mostly coreutils)
# * cp/rm/mv
# * edit_extra and source_extra
# * m/mm and p/pp

alias cp="cp -iv"
alias rm="rm -iv"
alias mv="mv -iv"
alias ls="ls -FGh"
alias du="du -cksh"
alias df="df -h"
# "color=auto" removes color when piping
alias grep="grep --color=auto"
alias egrep="egrep --color=auto"
alias grpe="grep" # fix typo
# highlight matched strings in red
export GREP_COLOR='1;31'
alias diff="colordiff -u"

[[ -x $(which colormake) ]] && alias make=colormake

# So I can tell ZSH to scan the PATH for newly-installed programs, without
# running the whole bootup process all over again. And yes, I used to use
# Gentoo.
# Wrap it in a function so it's evaluated at run-time.
function env-update { export PATH=$PATH; }

# Use modern regexps for sed, i.e. "(one|two)", not "\(one\|two\)"
alias sed="sed -E"

function al { ls -t | head -n ${1:-10}; }

# 3 params:
#  * topdir
#  * basename of file
#  * command to perform
# If file is given, performs $command on
# $topdir/$basename, else performs $command on
# ~/.zshrc. If file is given but doesn't exist, asks user what to do.
function perform_under_basedir {
  local topdir=$1
  local snippet=$2
  local cmd=$3
  local fname="$topdir/$snippet"
  if [[ -n "$snippet" ]]; then
    if [[ -f "$fname" ]]; then
      $cmd "$fname"
    else
      echo -n "$fname does not exist. Edit anyway? Y/n: "
      read response
      # Must type "n" or "no"
      [[ ! $response =~ '[Nn][Oo]?' ]] && $cmd "$fname"
    fi
  else
    $cmd ~/.zshrc
  fi
}

function edit_extra {
  local basedir=~/.dotfiles/extra/
  local snippet=$1
  perform_under_basedir $basedir "$snippet" $EDITOR
}

# Edit ~/.dotfiles/zsh/*
function edit_extra_zsh {
  local basedir=~/.dotfiles/zsh/
  local snippet=$1
  perform_under_basedir $basedir "$snippet" $EDITOR
}

# source_extra by itself sources profile,
# source_extra with an argument sources ~/.dotfiles/extra/{arg}
function source_extra {
  local basedir=~/.dotfiles/extra/
  local snippet=$1
  # You can actually pass a builtin as a parameter. Who knew?
  perform_under_basedir $basedir "$snippet" source
}

function source_extra_zsh {
  local basedir=~/.dotfiles/zsh/
  local snippet=$1
  # You can actually pass a builtin as a parameter. Who knew?
  perform_under_basedir $basedir "$snippet" source
}
# Set aliases for easy typing. ZSH even autocompletes them!
alias qe=edit_extra
alias qqe=source_extra
alias qz=edit_extra_zsh
alias qqz=source_extra_zsh
# zshrc only
alias q="$EDITOR ~/.zshrc"
alias qq="source ~/.zshrc"

# VLC / Preview stuff
function m {
  open -a VLC "${@:-.}"
}

function p() {
  open -a Preview "${@:-.}"
}

# pst = "p star"; intentionally not quoted so you can put your own stars in
#pst(){ open -a Preview *$1*; }
# you can pipe pure "ls" output to "pp"
# See also:  echo ${(qqqfo)$(ls)}, via "man zshexpn"
alias pp="sed -e 's/ /\\\\\\\ /g' | xargs echo | xargs open -a Preview"
alias mm="sed -e 's/ /\\\\\\\ /g' | xargs echo | xargs open -a VLC"
